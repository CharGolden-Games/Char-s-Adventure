// For Reference.

package objects.characters;

import flixel.FlxObject;
import flixel.effects.FlxFlicker;
import flixel.ui.FlxBar;
import flixel.util.FlxAxes;
import flixel.util.FlxTimer;

class Enemy extends FlxSprite
{
	public var zIndex(default, set):Int = 0;
	public var healthPercent:Float = 0;
	public var isBoss:Bool = false;
	public var healthBar:FlxBar;
	public var chaseDistance:Float = 0;
	public var speed:Float;
	public var targets:Array<Player>;
	public var defense:Float = 0;
	public var animArray:Array<String> = [
		'idle',
		'walk_left',
		'walk_down',
		'walk_up',
		'walk_right',
		'attack',
		'hit',
		'dead'
	];
	public var name:String = '';

	var ogName:String;

	public var flicker:FlxFlicker;
	public var hitTimer:FlxTimer;
	public var damage:Float;
	public var maxHealth:Float = 0;

	public function new(x:Float, y:Float, chaseDistance:Float, charImg:String, speed:Float, defense:Float, health:Float, name:String, damage:Float)
	{
		super(x, y);

		this.chaseDistance = chaseDistance;
		this.defense = defense;
		this.speed = speed;
		loadGraphic(Paths.playerImage(charImg));
		try
		{
			this.frames = (Paths.playerXML(charImg));
		}
		catch (e:Dynamic)
		{
			trace('Error getting frames! $e');
		}
		animation.addByPrefix('idle', 'IdleMic0', 24, true);
		animation.addByPrefix('idleRight', 'IdleMicRight', 24, true);
		animation.addByPrefix('walkLEFT', 'WalkLeftMic', 24, true);
		animation.addByPrefix('walkRIGHT', 'WalkRightMic', 24, true);
		animation.addByPrefix('attackLeft', 'SingLeft', 24, false);
		animation.addByPrefix('attackRight', 'SingRight', 24, false);
		animation.addByPrefix('hit', 'Hurt0', 24, false);
		animation.play('idle');
		antialiasing = !Save.data.lowQuality;
		this.health = health;
		maxHealth = health;
		ogName = name;
		this.name = name + zIndex;
		this.damage = damage;
	}

	public function set_zIndex(value:Int):Int
	{
		zIndex = value;
		name = ogName + '_' + zIndex;
		return zIndex = value;
	}

	/**
	 * Maps a given animation to a valid animation to play
	 * @param name Name of animation on the XML
	 * @param animToMap the anim to map it to, `possible mapping: [ [0, 'idle'], [1, 'walk_left'], [2, 'walk_down'], [3, 'walk_up'], [4, 'walk_right'], [5, 'attack'], [6, 'hit'], [7, 'dead'] ]`
	 * @param framerate 
	 * @param isLooped 
	 * @param flipX 
	 * @param flipY 
	 */
	public function mapAnim(name:String, animToMap:Int, framerate:Int = 24, isLooped:Bool = false, flipX:Bool = false, flipY:Bool = false)
	{
		this.animation.addByPrefix(animArray[animToMap], name, framerate, isLooped, flipX, flipY);
	}

	public function playAnim(anim:String)
	{
		this.animation.play(anim);
	}

	public function setChaseTargets(targets:Array<Player>)
	{
		this.targets = targets;
	}

	public function addHealth(int:Float)
	{
		health += int;
	}

	public var xDistanceCalcP1:Float = 0;
	public var yDistanceCalcP1:Float = 0;
	public var xDistanceCalcP2:Float = 0;
	public var yDistanceCalcP2:Float = 0;
	public var xDistanceCalcP3:Float = 0;
	public var yDistanceCalcP3:Float = 0;

	override function update(elapsed:Float)
	{
		super.update(elapsed);

		healthPercent = health / maxHealth;

		for (i in 0...targets.length)
		{
			switch (i)
			{
				case 0:
					xDistanceCalcP1 = this.x - targets[0].x;
					yDistanceCalcP1 = this.y - targets[0].y;

				case 1:
					xDistanceCalcP2 = this.x - targets[1].x;
					yDistanceCalcP2 = this.y - targets[1].y;

				case 2:
					xDistanceCalcP3 = this.x - targets[1].x;
					yDistanceCalcP3 = this.y - targets[1].y;
			}
		}

		/*for (target in targets) {
			if (target != null) {
				xDistanceCalc = this.x - target.x;
				yDistanceCalc = this.y - target.y;
				if (xDistanceCalc <= chaseDistance) {
					//xDistanceCalc = this.x - target.x;
					if (xDistanceCalc < 0)
						doMovement(speed, X);
					if (xDistanceCalc >= 0)
						doMovement(-speed, X);
				}
				if (yDistanceCalc <= chaseDistance) {
					//yDistanceCalc = this.y - target.y;
					if (yDistanceCalc < 0)
						doMovement(speed, Y);
					if (yDistanceCalc >= 0)
						doMovement(-speed, Y);
				}
			}
		}*/

		if (health <= 0)
			visible = false;
		active = false;
	}

	var delayTimer:FlxTimer;

	public function doDamage(dmg:Float)
	{
		try
		{
			if (delayTimer != null)
				delayTimer.cancel();
			if (flicker != null)
				flicker.stop();
			// PlayState.doDamage(true);

			health -= dmg;
			animation.play('hit');
			hitTimer = new FlxTimer().start(0.81, function(tmr:FlxTimer)
			{
				try
				{
					animation.play('idle');
				}
				catch (e:Dynamic) {}
				// PlayState.doDamage(false);
			});
			flicker = FlxFlicker.flicker(this, 0.81, 0.04);
			delayTimer = new FlxTimer().start(0.81, function(tmr:FlxTimer)
			{
				delayTimer = null;
				flicker = null;
			});
		}
		catch (e:Dynamic) {}
	}

	override function destroy()
	{
		super.destroy();
		if (hitTimer != null)
		{
			hitTimer.cancel();
		}
	}

	function doMovement(move:Float, axis:FlxAxes)
	{
		switch (axis)
		{
			case NONE:
				trace('NO AXIS SPECIFIED!');
			case X:
				this.x += move;
				var anim:String = move < 0 ? 'walk_left' : 'walk_right';
				this.animation.play(anim);
			case Y:
				this.y += move;
				var anim:String = move < 0 ? 'walk_up' : 'walk_down';
				this.animation.play(anim);
			case XY:
				trace("SHOULDN'T HAPPEN, DOING NOTHING.");
		}
	}
}